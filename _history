{"entries":[{"timestamp":1745806503795,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n"],[-1,"import com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.PerspectiveCamera;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.Mesh;\nimport com.badlogic.gdx.graphics.VertexAttribute;\nimport com.badlogic.gdx.graphics.VertexAttributes;\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\n\npublic class My3DGame extends ApplicationAdapter {\n    private PerspectiveCamera camera;\n    private ShapeRenderer shapeRenderer;\n\n    @Override\n    public void create() {\n        // Set up the camera\n        camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n        camera.position.set(0f, 0f, 5f);\n        camera.lookAt(0f, 0f, 0f);\n        camera.near = 1f;\n        camera.far = 300f;\n        camera.update();\n\n        // Set up the renderer\n        shapeRenderer = new ShapeRenderer();\n    }\n\n    @Override\n    public void render() {\n        // Clear the screen with a background color\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);\n        shapeRenderer.setProjectionMatrix(camera.combined);\n\n        // Begin rendering 3D objects\n        shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);\n        shapeRenderer.setColor(Color.RED);\n\n        // Draw a 3D cube at the origin (center of the world)\n        shapeRenderer.box(-1f, -1f, -1f, 2f, 2f, 2f); // x, y, z, width, height, depth\n        shapeRenderer.end();\n    }\n\n    @Override\n    public void resize(int width, int height) {\n        camera.viewportWidth = width;\n        camera.viewportHeight = height;\n        camera.update();\n    }\n\n    @Override\n    public void pause() {\n    }\n\n    @Override\n    public void resume() {\n    }\n\n    @Override\n    public void dispose() {\n        shapeRenderer.dispose();\n    }\n}\nif (Gdx.input.isKeyPressed(Keys.W)) {\n    camera.position.add(0f, 0f, -0.1f); // Move camera forward\n}\nif (Gdx.input.isKeyPressed(Keys.S)) {\n    camera.position.add(0f, 0f, 0.1f); // Move camera backward\n}\nif (Gdx.input.isKeyPressed(Keys.A)) {\n    camera.position.add(-0.1f, 0f, 0f); // Move camera left\n}\nif (Gdx.input.isKeyPressed(Keys.D)) {\n    camera.position.add(0.1f, 0f, 0f); // Move camera right\n}\n"]],"start1":0,"start2":0,"length1":2301,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":233,"start2":233,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1745806503794,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"minecraft\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1745806895852}